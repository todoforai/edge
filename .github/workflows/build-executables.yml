name: Build and Deploy Executables

on:
  push:
    branches: [ prod ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: todoforai-edge-linux
          - os: windows-latest
            output_name: todoforai-edge.exe
          - os: macos-latest
            output_name: todoforai-edge-mac

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyinstaller
        
    - name: Build executable
      run: python build_executable.py
      
    - name: Rename executable (Linux/Mac)
      if: matrix.os != 'windows-latest'
      run: mv dist/todoforai-edge dist/${{ matrix.output_name }}
      shell: bash
      
    # Windows doesn't need renaming since the output name is already correct
      
    - name: Upload executable as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output_name }}
        path: dist/${{ matrix.output_name }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/prod'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Install or Update AWS CLI v2
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version
        
    - name: Configure AWS CLI for CloudFlare R2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "auto"
        AWS_CA_BUNDLE: ""
      run: |
        # Create AWS credentials file directly instead of using configure command
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
        
        echo "[default]" > ~/.aws/config
        echo "region = $AWS_DEFAULT_REGION" >> ~/.aws/config
        echo "ca_bundle = " >> ~/.aws/config
        echo "ssl_verify = false" >> ~/.aws/config
        echo "[s3]" >> ~/.aws/config
        echo "addressing_style = virtual" >> ~/.aws/config
        echo "use_accelerate_endpoint = false" >> ~/.aws/config
        echo "signature_version = s3v4" >> ~/.aws/config
        echo "max_concurrent_requests = 100" >> ~/.aws/config
        echo "multipart_threshold = 64MB" >> ~/.aws/config
        echo "multipart_chunksize = 16MB" >> ~/.aws/config
        
    - name: Debug environment
      run: |
        # Check if secrets are available (without revealing them)
        if [ -n "${{ secrets.R2_BUCKET_NAME }}" ]; then
          echo "R2_BUCKET_NAME is set"
        else
          echo "R2_BUCKET_NAME is NOT set"
        fi
        
        if [ -n "${{ secrets.R2_ENDPOINT }}" ]; then
          echo "R2_ENDPOINT is set"
        else
          echo "R2_ENDPOINT is NOT set"
        fi
        
        # List downloaded artifacts
        echo "Listing downloaded artifacts:"
        ls -la
        ls -la todoforai-edge-linux/ || echo "Linux artifact not found"
        ls -la todoforai-edge.exe/ || echo "Windows artifact not found"
        ls -la todoforai-edge-mac/ || echo "Mac artifact not found"
        
        # Debug AWS CLI config
        echo "AWS CLI config:"
        cat ~/.aws/config
        
    - name: Upload to CloudFlare R2
      env:
        R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
        AWS_CA_BUNDLE: ""
      run: |
        # Determine folder name based on trigger
        if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
          # Get version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          FOLDER="$VERSION"
        else
          # For prod branch pushes
          FOLDER="latest"
        fi
        
        echo "Uploading to folder: $FOLDER"
        
        # Check if endpoint is set
        if [ -z "$R2_ENDPOINT" ]; then
          echo "Error: R2_ENDPOINT is not set"
          exit 1
        fi
        
        # Check if bucket name is set
        if [ -z "$R2_BUCKET_NAME" ]; then
          echo "Error: R2_BUCKET_NAME is not set"
          exit 1
        fi
        
        # Try with different AWS CLI options
        export AWS_CA_BUNDLE=""
        
        # Upload executables to R2 with additional parameters
        aws s3 cp todoforai-edge-linux/todoforai-edge-linux "s3://${R2_BUCKET_NAME}/edge/${FOLDER}/todoforai-edge-linux" \
          --endpoint-url "${R2_ENDPOINT}" \
          --acl public-read \
          --no-verify-ssl
          
        aws s3 cp todoforai-edge.exe/todoforai-edge.exe "s3://${R2_BUCKET_NAME}/edge/${FOLDER}/todoforai-edge.exe" \
          --endpoint-url "${R2_ENDPOINT}" \
          --acl public-read \
          --no-verify-ssl
          
        aws s3 cp todoforai-edge-mac/todoforai-edge-mac "s3://${R2_BUCKET_NAME}/edge/${FOLDER}/todoforai-edge-mac" \
          --endpoint-url "${R2_ENDPOINT}" \
          --acl public-read \
          --no-verify-ssl
        
        # If this is a tag, also update the latest folder
        if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
          aws s3 cp todoforai-edge-linux/todoforai-edge-linux "s3://${R2_BUCKET_NAME}/edge/latest/todoforai-edge-linux" \
            --endpoint-url "${R2_ENDPOINT}" \
            --acl public-read \
            --no-verify-ssl
            
          aws s3 cp todoforai-edge.exe/todoforai-edge.exe "s3://${R2_BUCKET_NAME}/edge/latest/todoforai-edge.exe" \
            --endpoint-url "${R2_ENDPOINT}" \
            --acl public-read \
            --no-verify-ssl
            
          aws s3 cp todoforai-edge-mac/todoforai-edge-mac "s3://${R2_BUCKET_NAME}/edge/latest/todoforai-edge-mac" \
            --endpoint-url "${R2_ENDPOINT}" \
            --acl public-read \
            --no-verify-ssl
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: |
          todoforai-edge-linux/todoforai-edge-linux
          todoforai-edge.exe/todoforai-edge.exe
          todoforai-edge-mac/todoforai-edge-mac
